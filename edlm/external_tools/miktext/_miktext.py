# coding=utf-8
"""
Miktex external tool
"""

import typing
from pathlib import Path

import elib

from edlm import HERE
from edlm.external_tools.base import BaseExternalTool

STR_OR_PATH = typing.Union[str, Path]

MPM_CONFIG = """;;; DO NOT EDIT THIS FILE!


[MPM]
AutoInstall=1

"""


class MikTex(BaseExternalTool):
    """
    Miktex external tool
    """
    url = r'https://miktex.org/download/ctan/systems/win32/miktex/setup/miktex-portable-2.9.6521.exe'
    hash = 'c8164da05a93b7f00eb79cba7d9ce611'
    default_archive = Path(HERE, 'miktex.7z').absolute()
    default_install = Path(HERE, 'miktex').absolute()
    expected_version = '2.9.6354'

    @property
    def version(self) -> str:
        """

        Returns: Miktex version

        """
        if self._version is None:
            self._version = self('--version', mute=True).split('\n')[0].split(' ')[1]
        return self._version

    @property
    def exe(self) -> Path:
        """

        Returns: Miktex executable

        """
        if self._exe is None:
            self._exe = Path(self.install_dir, 'texmfs/install/miktex/bin/pdflatex.exe').absolute()
        return self._exe

    def setup(self):
        """
        Setup Miktex
        """
        super(MikTex, self).setup()
        mpm_config_file = Path(self.install_dir, 'texmfs/config/miktex/config/miktex.ini')
        if not mpm_config_file.exists():
            elib.path.ensure_dir(mpm_config_file.parent, must_exist=False, create=True)
            mpm_config_file.write_text(MPM_CONFIG, encoding='utf8')
        else:
            content = mpm_config_file.read_text(encoding='utf8').split('\n')
            output = []
            found = False
            for line in content:
                if 'AutoInstall=' in line:
                    found = True
                    output.append('AutoInstall=1')
                else:
                    output.append(line)
            if not found:
                output = []
                for line in content:
                    if '[MPM]' in line:
                        output.append(line)
                        output.append('AutoInstall=1')
                        found = True
                    else:
                        output.append(line)
            if not found:
                output.append('[MPM]')
                output.append('AutoInstall=1')
            mpm_config_file.write_text('\n'.join(output))
